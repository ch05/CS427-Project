package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.ITrustException;

public class EpidemicDAO {

	private DAOFactory factory;

	
	public EpidemicDAO(DAOFactory factory) {
		this.factory = factory;
	}
	
	@SuppressWarnings("finally")
	public boolean isMalariaEpidemic(String zipcode, Date d) throws ITrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		PreparedStatement ps2 = null;
		Calendar c = new GregorianCalendar();
		c.setTime(d);
		String subqueryOfficeDiagnosis = "(SELECT VisitID FROM ovdiagnosis WHERE ICDCode = 84.50)";
		String subqueryPatientZip = "(SELECT MID FROM patients WHERE zip LIKE '" + zipcode.substring(0, 3) + "%')";
		double threshold = this.malariaEpidemicThreshold(zipcode, d);
		boolean ret = false;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT "
					+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
					+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZip + " AND "
					+ "YEAR(?) = YEAR(officevisits.VisitDate) AND ((WEEK(?) - 1) = WEEK(officevisits.VisitDate))");
			
			ps.setDate(1, d);
			ps.setDate(2, d);

			ResultSet rs;
			rs = ps.executeQuery();
			if(rs.next()){
				if(rs.getInt("NumTotalCases") > threshold){
					ps2 = conn.prepareStatement("SELECT "
							+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
							+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZip + " AND "
							+ "YEAR(?) = YEAR(officevisits.VisitDate) AND  ((WEEK(?)) = WEEK(officevisits.VisitDate))");
					
					ps2.setDate(1, d);
					ps2.setDate(2, d);

					ResultSet rs2;
					rs2 = ps2.executeQuery();

					if(rs2.next()){
						if(rs2.getInt("NumTotalCases") > threshold){
							ret = true;
						}
					}
				}
			}
			
			return ret;

		} catch (SQLException e) {
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	@SuppressWarnings("finally")
	public double malariaEpidemicThreshold(String zipcode, Date d) throws ITrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		Calendar c = new GregorianCalendar();
		c.setTime(d);
		int yearNumber = c.get(Calendar.YEAR);
		String subqueryOfficeDiagnosis = "(SELECT VisitID FROM ovdiagnosis WHERE ICDCode = 84.50)";
		String subqueryPatientZip = "(SELECT MID FROM patients WHERE zip LIKE '" + zipcode.substring(0, 3) + "%')";
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT MIN(officevisits.VisitDate) as LowYear, "
					+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
					+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZip + " AND "
					+ "YEAR(officevisits.VisitDate) < YEAR(?)");
			ps.setDate(1, d);
			ResultSet rs;
			ResultSet rs2;

			rs = ps.executeQuery();
			if(rs.next()){
				double yearSpan = yearNumber - rs.getInt("LowYear");
				double threshold = rs.getInt("NumTotalCases")/yearSpan;
				return threshold;
			}
			
			return -1;

		} catch (SQLException e) {
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	@SuppressWarnings("finally")
	public boolean isInfluenzaEpidemic(String zipcode, Date d) throws ITrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		PreparedStatement ps2 = null;
		Calendar c = new GregorianCalendar();
		c.setTime(d);
		String subqueryOfficeDiagnosis = "(SELECT VisitID FROM ovdiagnosis WHERE ICDCode = 487.00)";
		String subqueryPatientZip = "(SELECT MID FROM patients WHERE zip LIKE '" + zipcode.substring(0, 3) + "%')";
		double threshold = this.influenzaEpidemicThreshold(d);
		boolean ret = false;
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT "
					+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
					+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZip + " AND "
					+ "YEAR(?) = YEAR(officevisits.VisitDate) AND ((WEEK(?) - 1) = WEEK(officevisits.VisitDate))");
			
			ps.setDate(1, d);
			ps.setDate(2, d);

			ResultSet rs;
			rs = ps.executeQuery();
			if(rs.next()){
				if(rs.getInt("NumTotalCases") > threshold){
					ps2 = conn.prepareStatement("SELECT "
							+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
							+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZip + " AND "
							+ "YEAR(?) = YEAR(officevisits.VisitDate) AND  ((WEEK(?)) = WEEK(officevisits.VisitDate))");
					
					ps2.setDate(1, d);
					ps2.setDate(2, d);

					ResultSet rs2;
					rs2 = ps2.executeQuery();

					if(rs2.next()){
						if(rs2.getInt("NumTotalCases") > threshold){
							ret = true;
						}
					}
				}
			}
			
			return ret;

		} catch (SQLException e) {
			System.out.println("Error2: " + e.getMessage());
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	public double influenzaEpidemicThreshold(Date d){
		Calendar c = new GregorianCalendar();
		c.setTime(d);
		int weekNumber = c.get(Calendar.WEEK_OF_YEAR);
		return calcThreshold(weekNumber);
	}
	
	private double calcThreshold(double weekNumber) {
		return 5.34 + 0.271 * weekNumber + 3.45 * Math.sin(2 * Math.PI * weekNumber / 52.0)
	                + 8.41 * Math.cos(2 * Math.PI * weekNumber / 52.0);
	} 
	
	@SuppressWarnings("finally")
	public List<Integer> diagnosisRegion(String zipcode, Date d, String icdcode) throws ITrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		Calendar c = new GregorianCalendar();
		c.setTime(d);
		List<Integer> ret = new ArrayList<Integer>();
		String subqueryOfficeDiagnosis = "(SELECT VisitID FROM ovdiagnosis WHERE ICDCode = " + icdcode + ")";
		String subqueryPatientZipRegion = "(SELECT MID FROM patients WHERE zip LIKE '" + zipcode.substring(0, 3) + "%')";
		try {
			conn = factory.getConnection();
			for(int i = 8; i > 0; i--){
				ps = conn.prepareStatement("SELECT "
						+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
						+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZipRegion + " AND "
						+ "YEAR(?) = YEAR(officevisits.VisitDate) AND ((WEEK(?) - ?) = WEEK(officevisits.VisitDate))");
				
				ps.setDate(1, d);
				ps.setDate(2, d);
				ps.setInt(3, i);
	
				ResultSet rs;
				rs = ps.executeQuery();
				rs.next();
				
				ret.add(rs.getInt("NumTotalCases"));
			}
			return ret;

		} catch (SQLException e) {
			System.out.println("Error2: " + e.getMessage());
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	@SuppressWarnings("finally")
	public List<Integer> diagnosisState(String zipcode, Date d, String icdcode) throws ITrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		Calendar c = new GregorianCalendar();
		c.setTime(d);
		List<Integer> ret = new ArrayList<Integer>();
		String subqueryOfficeDiagnosis = "(SELECT VisitID FROM ovdiagnosis WHERE ICDCode = " + icdcode + ")";
		String subqueryPatientZipRegion = "(SELECT MID FROM patients WHERE zip LIKE '" + zipcode.substring(0, 2) + "%')";
		try {
			conn = factory.getConnection();
			for(int i = 8; i > 0; i--){
				ps = conn.prepareStatement("SELECT "
						+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
						+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZipRegion + " AND "
						+ "YEAR(?) = YEAR(officevisits.VisitDate) AND ((WEEK(?) - ?) = WEEK(officevisits.VisitDate))");
				
				ps.setDate(1, d);
				ps.setDate(2, d);
				ps.setInt(3, i);
	
				ResultSet rs;
				rs = ps.executeQuery();
				rs.next();
				
				ret.add(rs.getInt("NumTotalCases"));
			}
			return ret;

		} catch (SQLException e) {
			System.out.println("Error2: " + e.getMessage());
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	@SuppressWarnings("finally")
	public List<Integer> diagnosisAll(String zipcode, Date d, String icdcode) throws ITrustException, DBException {
		Connection conn = null;
		PreparedStatement ps = null;
		Calendar c = new GregorianCalendar();
		c.setTime(d);
		List<Integer> ret = new ArrayList<Integer>();
		String subqueryOfficeDiagnosis = "(SELECT VisitID FROM ovdiagnosis WHERE ICDCode = " + icdcode + ")";
		String subqueryPatientZipRegion = "(SELECT MID FROM patients WHERE zip LIKE '%')";
		try {
			conn = factory.getConnection();
			for(int i = 8; i > 0; i--){
				ps = conn.prepareStatement("SELECT "
						+ "COUNT(officevisits.VisitDate) as NumTotalCases FROM officevisits WHERE officevisits.ID = ANY "
						+ subqueryOfficeDiagnosis + "AND officevisits.PatientID = ANY " + subqueryPatientZipRegion + " AND "
						+ "YEAR(?) = YEAR(officevisits.VisitDate) AND ((WEEK(?) - ?) = WEEK(officevisits.VisitDate))");
				
				ps.setDate(1, d);
				ps.setDate(2, d);
				ps.setInt(3, i);
	
				ResultSet rs;
				rs = ps.executeQuery();
				rs.next();
				
				ret.add(rs.getInt("NumTotalCases"));
			}
			return ret;

		} catch (SQLException e) {
			System.out.println("Error2: " + e.getMessage());
			throw new DBException(e);
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
	
}
