package edu.ncsu.csc.itrust.dao.mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.beans.RequestBean;
import edu.ncsu.csc.itrust.beans.loaders.RequestBeanLoader;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * Used to keep track of HTTP requests
 * 
 * DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
 * one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
 * added. DAOs can assume that all data has been validated and is correct.
 * 
 * DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
 * accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
 * connections and/or accessing other DAOs.
 * 
 *  
 *  
 */
public class RequestDAO {
	private DAOFactory factory;
	private RequestBeanLoader requestLoader; 
	
	public RequestDAO(DAOFactory factory) {
		this.factory = factory;
		this.requestLoader = new RequestBeanLoader();
	}
	
	public void addRequest(RequestBean request) throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("INSERT INTO request (contentLength, requestedPage, host, userAgent)"
					+ " VALUES (?, ?, ?, ?)");
			ps.setInt(1, request.getContentLength());
			ps.setString(2, request.getRequestedPage());
			ps.setString(3, request.getHost());
			ps.setString(4, request.getUserAgent());
			ps.execute();
			ps.close();
			
		} catch(SQLException e) {
			throw new DBException(e);
		}finally{
			DBUtil.closeConnection(conn, ps);
		}
	}
	
	/**
	 * Returns a list of all HTTP requests in the database 
	 * @return List of RequestBeans representing the HTTP requests
	 * @throws DBException
	 */
	public List<RequestBean> getRequests() throws DBException{
		Connection conn = null;
		PreparedStatement ps = null;
		
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT * FROM request");
			ResultSet rs = ps.executeQuery();
			
			List<RequestBean> requests = requestLoader.loadList(rs);
			rs.close();
			ps.close();
			
			return requests;
		} catch(SQLException e) {
			throw new DBException(e);
		}finally{
			DBUtil.closeConnection(conn, ps);
		}
	}
}
